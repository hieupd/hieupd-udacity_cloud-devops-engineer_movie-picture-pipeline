name: Frontend CD 

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'starter/frontend/**'

defaults:
  run:
    working-directory: starter/frontend

jobs:
  run-lint:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Clean install dependencies
      run: npm ci

    - name: Run linting jobs
      run: npm run lint --fix

  run-test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Clean install dependencies
      run: npm ci

    - name: Run testing jobs
      run: npm run test
      continue-on-error: false

  build-and-deploy:
    needs: [run-lint, run-test]
    env:
      REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Clean install dependencies
      run: npm ci

    - name: Run testing jobs
      run: npm run test
      continue-on-error: false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Deploy Kubernetes manifests
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: frontend
        NEW_IMAGE_TAG: ${{ github.sha }}
      run: |
        cd k8s
        aws sts get-caller-identity
        aws eks --region $AWS_REGION update-kubeconfig --name cluster
        kubectl config current-context
        kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$NEW_IMAGE_TAG
        kustomize build | kubectl apply -f -
        kubectl get pods
        kubectl get svc